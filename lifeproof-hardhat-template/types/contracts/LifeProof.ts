/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LifeProof {
  export type CommentInfoStruct = {
    user: AddressLike;
    cid: string;
    timestamp: BigNumberish;
  };

  export type CommentInfoStructOutput = [
    user: string,
    cid: string,
    timestamp: bigint
  ] & { user: string; cid: string; timestamp: bigint };

  export type LifeEventStruct = {
    title: string;
    description: string;
    imageURI: string;
    category: string;
    timestamp: BigNumberish;
    isPublic: boolean;
  };

  export type LifeEventStructOutput = [
    title: string,
    description: string,
    imageURI: string,
    category: string,
    timestamp: bigint,
    isPublic: boolean
  ] & {
    title: string;
    description: string;
    imageURI: string;
    category: string;
    timestamp: bigint;
    isPublic: boolean;
  };
}

export interface LifeProofInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addComment"
      | "addToMood"
      | "allowTransientMood"
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "getComments"
      | "getEvent"
      | "getMoodHandle"
      | "getMyEventIds"
      | "getMyEvents"
      | "getPublicFeed"
      | "hasLiked"
      | "isApprovedForAll"
      | "lifeEvents"
      | "like"
      | "likeCounts"
      | "mintLifeEvent"
      | "name"
      | "nextTokenId"
      | "owner"
      | "ownerOf"
      | "protocolId"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "toggleVisibility"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "LifeEventCommented"
      | "LifeEventCreated"
      | "LifeEventLiked"
      | "LifeEventPublished"
      | "LifeEventVisibilityChanged"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addComment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToMood",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransientMood",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComments",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMoodHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyEventIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicFeed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLiked",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lifeEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "likeCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLifeEvent",
    values: [string, string, string, string, boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleVisibility",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addComment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToMood", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowTransientMood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMoodHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyEventIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasLiked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lifeEvents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "likeCounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintLifeEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleVisibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LifeEventCommentedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    cid: string
  ];
  export type OutputTuple = [tokenId: bigint, user: string, cid: string];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LifeEventCreatedEvent {
  export type InputTuple = [user: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [user: string, tokenId: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LifeEventLikedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    liked: boolean,
    newCount: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    user: string,
    liked: boolean,
    newCount: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    liked: boolean;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LifeEventPublishedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LifeEventVisibilityChangedEvent {
  export type InputTuple = [tokenId: BigNumberish, isPublic: boolean];
  export type OutputTuple = [tokenId: bigint, isPublic: boolean];
  export interface OutputObject {
    tokenId: bigint;
    isPublic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LifeProof extends BaseContract {
  connect(runner?: ContractRunner | null): LifeProof;
  waitForDeployment(): Promise<this>;

  interface: LifeProofInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComment: TypedContractMethod<
    [tokenId: BigNumberish, cid: string],
    [void],
    "nonpayable"
  >;

  addToMood: TypedContractMethod<
    [tokenId: BigNumberish, k: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowTransientMood: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getComments: TypedContractMethod<
    [tokenId: BigNumberish, offset: BigNumberish, limit: BigNumberish],
    [LifeProof.CommentInfoStructOutput[]],
    "view"
  >;

  getEvent: TypedContractMethod<
    [tokenId: BigNumberish],
    [LifeProof.LifeEventStructOutput],
    "view"
  >;

  getMoodHandle: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getMyEventIds: TypedContractMethod<[], [bigint[]], "view">;

  getMyEvents: TypedContractMethod<
    [],
    [LifeProof.LifeEventStructOutput[]],
    "view"
  >;

  getPublicFeed: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  hasLiked: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  lifeEvents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, boolean] & {
        title: string;
        description: string;
        imageURI: string;
        category: string;
        timestamp: bigint;
        isPublic: boolean;
      }
    ],
    "view"
  >;

  like: TypedContractMethod<
    [tokenId: BigNumberish, doLike: boolean],
    [void],
    "nonpayable"
  >;

  likeCounts: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  mintLifeEvent: TypedContractMethod<
    [
      title: string,
      description: string,
      imageURI: string,
      category: string,
      isPublic: boolean,
      moodExternal: BytesLike,
      proof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  toggleVisibility: TypedContractMethod<
    [tokenId: BigNumberish, isPublic: boolean],
    [void],
    "nonpayable"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComment"
  ): TypedContractMethod<
    [tokenId: BigNumberish, cid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToMood"
  ): TypedContractMethod<
    [tokenId: BigNumberish, k: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowTransientMood"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getComments"
  ): TypedContractMethod<
    [tokenId: BigNumberish, offset: BigNumberish, limit: BigNumberish],
    [LifeProof.CommentInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEvent"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [LifeProof.LifeEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMoodHandle"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMyEventIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMyEvents"
  ): TypedContractMethod<[], [LifeProof.LifeEventStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPublicFeed"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasLiked"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lifeEvents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, boolean] & {
        title: string;
        description: string;
        imageURI: string;
        category: string;
        timestamp: bigint;
        isPublic: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "like"
  ): TypedContractMethod<
    [tokenId: BigNumberish, doLike: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "likeCounts"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintLifeEvent"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      imageURI: string,
      category: string,
      isPublic: boolean,
      moodExternal: BytesLike,
      proof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleVisibility"
  ): TypedContractMethod<
    [tokenId: BigNumberish, isPublic: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "LifeEventCommented"
  ): TypedContractEvent<
    LifeEventCommentedEvent.InputTuple,
    LifeEventCommentedEvent.OutputTuple,
    LifeEventCommentedEvent.OutputObject
  >;
  getEvent(
    key: "LifeEventCreated"
  ): TypedContractEvent<
    LifeEventCreatedEvent.InputTuple,
    LifeEventCreatedEvent.OutputTuple,
    LifeEventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LifeEventLiked"
  ): TypedContractEvent<
    LifeEventLikedEvent.InputTuple,
    LifeEventLikedEvent.OutputTuple,
    LifeEventLikedEvent.OutputObject
  >;
  getEvent(
    key: "LifeEventPublished"
  ): TypedContractEvent<
    LifeEventPublishedEvent.InputTuple,
    LifeEventPublishedEvent.OutputTuple,
    LifeEventPublishedEvent.OutputObject
  >;
  getEvent(
    key: "LifeEventVisibilityChanged"
  ): TypedContractEvent<
    LifeEventVisibilityChangedEvent.InputTuple,
    LifeEventVisibilityChangedEvent.OutputTuple,
    LifeEventVisibilityChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "LifeEventCommented(uint256,address,string)": TypedContractEvent<
      LifeEventCommentedEvent.InputTuple,
      LifeEventCommentedEvent.OutputTuple,
      LifeEventCommentedEvent.OutputObject
    >;
    LifeEventCommented: TypedContractEvent<
      LifeEventCommentedEvent.InputTuple,
      LifeEventCommentedEvent.OutputTuple,
      LifeEventCommentedEvent.OutputObject
    >;

    "LifeEventCreated(address,uint256)": TypedContractEvent<
      LifeEventCreatedEvent.InputTuple,
      LifeEventCreatedEvent.OutputTuple,
      LifeEventCreatedEvent.OutputObject
    >;
    LifeEventCreated: TypedContractEvent<
      LifeEventCreatedEvent.InputTuple,
      LifeEventCreatedEvent.OutputTuple,
      LifeEventCreatedEvent.OutputObject
    >;

    "LifeEventLiked(uint256,address,bool,uint256)": TypedContractEvent<
      LifeEventLikedEvent.InputTuple,
      LifeEventLikedEvent.OutputTuple,
      LifeEventLikedEvent.OutputObject
    >;
    LifeEventLiked: TypedContractEvent<
      LifeEventLikedEvent.InputTuple,
      LifeEventLikedEvent.OutputTuple,
      LifeEventLikedEvent.OutputObject
    >;

    "LifeEventPublished(uint256)": TypedContractEvent<
      LifeEventPublishedEvent.InputTuple,
      LifeEventPublishedEvent.OutputTuple,
      LifeEventPublishedEvent.OutputObject
    >;
    LifeEventPublished: TypedContractEvent<
      LifeEventPublishedEvent.InputTuple,
      LifeEventPublishedEvent.OutputTuple,
      LifeEventPublishedEvent.OutputObject
    >;

    "LifeEventVisibilityChanged(uint256,bool)": TypedContractEvent<
      LifeEventVisibilityChangedEvent.InputTuple,
      LifeEventVisibilityChangedEvent.OutputTuple,
      LifeEventVisibilityChangedEvent.OutputObject
    >;
    LifeEventVisibilityChanged: TypedContractEvent<
      LifeEventVisibilityChangedEvent.InputTuple,
      LifeEventVisibilityChangedEvent.OutputTuple,
      LifeEventVisibilityChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
